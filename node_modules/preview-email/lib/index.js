'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const path = require('path');
const os = require('os');
const fs = require('fs');
const uuid = require('uuid');
const opn = require('opn');
const nodemailer = require('nodemailer');
const moment = require('moment');
const pug = require('pug');
const Promise = require('bluebird');

const writeFile = Promise.promisify(fs.writeFile);

const transport = nodemailer.createTransport({
  jsonTransport: true
});

const templateFilePath = path.join(__dirname, '..', 'template.pug');

const renderFilePromise = Promise.promisify(pug.renderFile);

const previewEmail = (() => {
  var _ref = _asyncToGenerator(function* (message, id, open = true) {
    if (typeof message !== 'object') throw new Error('Message argument is required');

    if (!id) id = uuid.v4();

    const res = yield transport.sendMail(message);

    res.message = JSON.parse(res.message);

    const html = yield renderFilePromise(templateFilePath, Object.assign(res.message, {
      cache: true,
      pretty: true,
      moment
    }));

    const filePath = `${os.tmpdir()}/${id}.html`;
    yield writeFile(filePath, html);

    if (open) yield opn(filePath, { wait: false });

    return `file://${filePath}`;
  });

  return function previewEmail(_x, _x2) {
    return _ref.apply(this, arguments);
  };
})();

module.exports = previewEmail;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsIm9zIiwiZnMiLCJ1dWlkIiwib3BuIiwibm9kZW1haWxlciIsIm1vbWVudCIsInB1ZyIsIlByb21pc2UiLCJ3cml0ZUZpbGUiLCJwcm9taXNpZnkiLCJ0cmFuc3BvcnQiLCJjcmVhdGVUcmFuc3BvcnQiLCJqc29uVHJhbnNwb3J0IiwidGVtcGxhdGVGaWxlUGF0aCIsImpvaW4iLCJfX2Rpcm5hbWUiLCJyZW5kZXJGaWxlUHJvbWlzZSIsInJlbmRlckZpbGUiLCJwcmV2aWV3RW1haWwiLCJtZXNzYWdlIiwiaWQiLCJvcGVuIiwiRXJyb3IiLCJ2NCIsInJlcyIsInNlbmRNYWlsIiwiSlNPTiIsInBhcnNlIiwiaHRtbCIsIk9iamVjdCIsImFzc2lnbiIsImNhY2hlIiwicHJldHR5IiwiZmlsZVBhdGgiLCJ0bXBkaXIiLCJ3YWl0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLE9BQU9DLFFBQVEsTUFBUixDQUFiO0FBQ0EsTUFBTUMsS0FBS0QsUUFBUSxJQUFSLENBQVg7QUFDQSxNQUFNRSxLQUFLRixRQUFRLElBQVIsQ0FBWDtBQUNBLE1BQU1HLE9BQU9ILFFBQVEsTUFBUixDQUFiO0FBQ0EsTUFBTUksTUFBTUosUUFBUSxLQUFSLENBQVo7QUFDQSxNQUFNSyxhQUFhTCxRQUFRLFlBQVIsQ0FBbkI7QUFDQSxNQUFNTSxTQUFTTixRQUFRLFFBQVIsQ0FBZjtBQUNBLE1BQU1PLE1BQU1QLFFBQVEsS0FBUixDQUFaO0FBQ0EsTUFBTVEsVUFBVVIsUUFBUSxVQUFSLENBQWhCOztBQUVBLE1BQU1TLFlBQVlELFFBQVFFLFNBQVIsQ0FBa0JSLEdBQUdPLFNBQXJCLENBQWxCOztBQUVBLE1BQU1FLFlBQVlOLFdBQVdPLGVBQVgsQ0FBMkI7QUFDM0NDLGlCQUFlO0FBRDRCLENBQTNCLENBQWxCOztBQUlBLE1BQU1DLG1CQUFtQmYsS0FBS2dCLElBQUwsQ0FBVUMsU0FBVixFQUFxQixJQUFyQixFQUEyQixjQUEzQixDQUF6Qjs7QUFFQSxNQUFNQyxvQkFBb0JULFFBQVFFLFNBQVIsQ0FBa0JILElBQUlXLFVBQXRCLENBQTFCOztBQUVBLE1BQU1DO0FBQUEsK0JBQWUsV0FBT0MsT0FBUCxFQUFnQkMsRUFBaEIsRUFBb0JDLE9BQU8sSUFBM0IsRUFBb0M7QUFDdkQsUUFBSSxPQUFPRixPQUFQLEtBQW1CLFFBQXZCLEVBQ0UsTUFBTSxJQUFJRyxLQUFKLENBQVUsOEJBQVYsQ0FBTjs7QUFFRixRQUFJLENBQUNGLEVBQUwsRUFBU0EsS0FBS2xCLEtBQUtxQixFQUFMLEVBQUw7O0FBRVQsVUFBTUMsTUFBTSxNQUFNZCxVQUFVZSxRQUFWLENBQW1CTixPQUFuQixDQUFsQjs7QUFFQUssUUFBSUwsT0FBSixHQUFjTyxLQUFLQyxLQUFMLENBQVdILElBQUlMLE9BQWYsQ0FBZDs7QUFFQSxVQUFNUyxPQUFPLE1BQU1aLGtCQUNqQkgsZ0JBRGlCLEVBRWpCZ0IsT0FBT0MsTUFBUCxDQUFjTixJQUFJTCxPQUFsQixFQUEyQjtBQUN6QlksYUFBTyxJQURrQjtBQUV6QkMsY0FBUSxJQUZpQjtBQUd6QjNCO0FBSHlCLEtBQTNCLENBRmlCLENBQW5COztBQVNBLFVBQU00QixXQUFZLEdBQUVqQyxHQUFHa0MsTUFBSCxFQUFZLElBQUdkLEVBQUcsT0FBdEM7QUFDQSxVQUFNWixVQUFVeUIsUUFBVixFQUFvQkwsSUFBcEIsQ0FBTjs7QUFFQSxRQUFJUCxJQUFKLEVBQVUsTUFBTWxCLElBQUk4QixRQUFKLEVBQWMsRUFBRUUsTUFBTSxLQUFSLEVBQWQsQ0FBTjs7QUFFVixXQUFRLFVBQVNGLFFBQVMsRUFBMUI7QUFDRCxHQXpCSzs7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUFOOztBQTJCQUcsT0FBT0MsT0FBUCxHQUFpQm5CLFlBQWpCIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IG9zID0gcmVxdWlyZSgnb3MnKTtcbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmNvbnN0IHV1aWQgPSByZXF1aXJlKCd1dWlkJyk7XG5jb25zdCBvcG4gPSByZXF1aXJlKCdvcG4nKTtcbmNvbnN0IG5vZGVtYWlsZXIgPSByZXF1aXJlKCdub2RlbWFpbGVyJyk7XG5jb25zdCBtb21lbnQgPSByZXF1aXJlKCdtb21lbnQnKTtcbmNvbnN0IHB1ZyA9IHJlcXVpcmUoJ3B1ZycpO1xuY29uc3QgUHJvbWlzZSA9IHJlcXVpcmUoJ2JsdWViaXJkJyk7XG5cbmNvbnN0IHdyaXRlRmlsZSA9IFByb21pc2UucHJvbWlzaWZ5KGZzLndyaXRlRmlsZSk7XG5cbmNvbnN0IHRyYW5zcG9ydCA9IG5vZGVtYWlsZXIuY3JlYXRlVHJhbnNwb3J0KHtcbiAganNvblRyYW5zcG9ydDogdHJ1ZVxufSk7XG5cbmNvbnN0IHRlbXBsYXRlRmlsZVBhdGggPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4nLCAndGVtcGxhdGUucHVnJyk7XG5cbmNvbnN0IHJlbmRlckZpbGVQcm9taXNlID0gUHJvbWlzZS5wcm9taXNpZnkocHVnLnJlbmRlckZpbGUpO1xuXG5jb25zdCBwcmV2aWV3RW1haWwgPSBhc3luYyAobWVzc2FnZSwgaWQsIG9wZW4gPSB0cnVlKSA9PiB7XG4gIGlmICh0eXBlb2YgbWVzc2FnZSAhPT0gJ29iamVjdCcpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdNZXNzYWdlIGFyZ3VtZW50IGlzIHJlcXVpcmVkJyk7XG5cbiAgaWYgKCFpZCkgaWQgPSB1dWlkLnY0KCk7XG5cbiAgY29uc3QgcmVzID0gYXdhaXQgdHJhbnNwb3J0LnNlbmRNYWlsKG1lc3NhZ2UpO1xuXG4gIHJlcy5tZXNzYWdlID0gSlNPTi5wYXJzZShyZXMubWVzc2FnZSk7XG5cbiAgY29uc3QgaHRtbCA9IGF3YWl0IHJlbmRlckZpbGVQcm9taXNlKFxuICAgIHRlbXBsYXRlRmlsZVBhdGgsXG4gICAgT2JqZWN0LmFzc2lnbihyZXMubWVzc2FnZSwge1xuICAgICAgY2FjaGU6IHRydWUsXG4gICAgICBwcmV0dHk6IHRydWUsXG4gICAgICBtb21lbnRcbiAgICB9KVxuICApO1xuXG4gIGNvbnN0IGZpbGVQYXRoID0gYCR7b3MudG1wZGlyKCl9LyR7aWR9Lmh0bWxgO1xuICBhd2FpdCB3cml0ZUZpbGUoZmlsZVBhdGgsIGh0bWwpO1xuXG4gIGlmIChvcGVuKSBhd2FpdCBvcG4oZmlsZVBhdGgsIHsgd2FpdDogZmFsc2UgfSk7XG5cbiAgcmV0dXJuIGBmaWxlOi8vJHtmaWxlUGF0aH1gO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBwcmV2aWV3RW1haWw7XG4iXX0=