"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const fs = require('fs');

const path = require('path');

const juice = require('juice');

const debug = require('debug')('email-templates');

const htmlToText = require('html-to-text');

const I18N = require('@ladjs/i18n');

const autoBind = require('auto-bind');

const nodemailer = require('nodemailer');

const consolidate = require('consolidate');

const previewEmail = require('preview-email');

const _ = require('lodash');

const _Promise = require('bluebird');

const s = require('underscore.string');

const getPaths = require('get-paths'); // promise version of `juice.juiceResources`


const juiceResources = (html, options) => {
  return new _Promise((resolve, reject) => {
    juice.juiceResources(html, options, (err, html) => {
      if (err) return reject(err);
      resolve(html);
    });
  });
};

const env = (process.env.NODE_ENV || 'development').toLowerCase();

const stat = _Promise.promisify(fs.stat);

const readFile = _Promise.promisify(fs.readFile);

class Email {
  constructor(config = {}) {
    debug('config passed %O', config); // 2.x backwards compatible support

    if (config.juiceOptions) {
      config.juiceResources = config.juiceOptions;
      delete config.juiceOptions;
    }

    if (config.disableJuice) {
      config.juice = false;
      delete config.disableJuice;
    }

    if (config.render) {
      config.customRender = true;
    }

    this.config = _.merge({
      views: {
        // directory where email templates reside
        root: path.resolve('emails'),
        options: {
          // default file extension for template
          extension: 'pug',
          map: {
            hbs: 'handlebars',
            njk: 'nunjucks'
          },
          engineSource: consolidate
        },
        // locals to pass to templates for rendering
        locals: {
          // pretty is automatically set to `false` for subject/text
          pretty: true
        }
      },
      // <https://nodemailer.com/message/>
      message: {},
      send: !['development', 'test'].includes(env),
      preview: env === 'development',
      // <https://github.com/ladjs/i18n>
      // set to an object to configure and enable it
      i18n: false,
      // pass a custom render function if necessary
      render: this.render.bind(this),
      customRender: false,
      // force text-only rendering of template (disregards template folder)
      textOnly: false,
      // <https://github.com/werk85/node-html-to-text>
      htmlToText: {
        ignoreImage: true
      },
      subjectPrefix: false,
      // <https://github.com/Automattic/juice>
      juice: true,
      juiceResources: {
        preserveImportant: true,
        webResources: {
          relativeTo: path.resolve('build'),
          images: false
        }
      },
      // pass a transport configuration object or a transport instance
      // (e.g. an instance is created via `nodemailer.createTransport`)
      // <https://nodemailer.com/transports/>
      transport: {}
    }, config); // override existing method

    this.render = this.config.render;
    if (!_.isFunction(this.config.transport.sendMail)) this.config.transport = nodemailer.createTransport(this.config.transport);
    debug('transformed config %O', this.config);
    autoBind(this);
  } // shorthand use of `juiceResources` with the config
  // (mainly for custom renders like from a database)


  juiceResources(html) {
    return juiceResources(html, this.config.juiceResources);
  } // a simple helper function that gets the actual file path for the template


  getTemplatePath(template) {
    var _this = this;

    return _asyncToGenerator(function* () {
      const _ref = path.isAbsolute(template) ? [path.dirname(template), path.basename(template)] : [_this.config.views.root, template],
            _ref2 = _slicedToArray(_ref, 2),
            root = _ref2[0],
            view = _ref2[1];

      const paths = yield getPaths(root, view, _this.config.views.options.extension);
      const filePath = path.resolve(root, paths.rel);
      return {
        filePath,
        paths
      };
    })();
  } // returns true or false if a template exists
  // (uses same look-up approach as `render` function)


  templateExists(view) {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      try {
        const _ref3 = yield _this2.getTemplatePath(view),
              filePath = _ref3.filePath;

        const stats = yield stat(filePath);
        if (!stats.isFile()) throw new Error(`${filePath} was not a file`);
        return true;
      } catch (err) {
        debug('templateExists', err);
        return false;
      }
    })();
  } // promise version of consolidate's render
  // inspired by koa-views and re-uses the same config
  // <https://github.com/queckezz/koa-views>


  render(view, locals = {}) {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      const _this3$config$views$o = _this3.config.views.options,
            map = _this3$config$views$o.map,
            engineSource = _this3$config$views$o.engineSource;

      const _ref4 = yield _this3.getTemplatePath(view),
            filePath = _ref4.filePath,
            paths = _ref4.paths;

      if (paths.ext === 'html' && !map) {
        const res = yield readFile(filePath, 'utf8');
        return res;
      }

      const engineName = map && map[paths.ext] ? map[paths.ext] : paths.ext;
      const renderFn = engineSource[engineName];
      if (!engineName || !renderFn) throw new Error(`Engine not found for the ".${paths.ext}" file extension`);

      if (_.isObject(_this3.config.i18n)) {
        const i18n = new I18N(Object.assign({}, _this3.config.i18n, {
          register: locals
        })); // support `locals.user.last_locale`
        // (e.g. for <https://lad.js.org>)

        if (_.isObject(locals.user) && _.isString(locals.user.last_locale)) locals.locale = locals.user.last_locale;
        if (_.isString(locals.locale)) i18n.setLocale(locals.locale);
      }

      const res = yield _Promise.promisify(renderFn)(filePath, locals); // transform the html with juice using remote paths
      // google now supports media queries
      // https://developers.google.com/gmail/design/reference/supported_css

      if (!_this3.config.juice) return res;
      const html = yield _this3.juiceResources(res);
      return html;
    })();
  } // TODO: this needs refactored
  // so that we render templates asynchronously


  renderAll(template, locals = {}, message = {}) {
    var _this4 = this;

    return _asyncToGenerator(function* () {
      let subjectTemplateExists = _this4.config.customRender;
      let htmlTemplateExists = _this4.config.customRender;
      let textTemplateExists = _this4.config.customRender;

      if (template && !_this4.config.customRender) {
        var _ref5 = yield _Promise.all([_this4.templateExists(`${template}/subject`), _this4.templateExists(`${template}/html`), _this4.templateExists(`${template}/text`)]);

        var _ref6 = _slicedToArray(_ref5, 3);

        subjectTemplateExists = _ref6[0];
        htmlTemplateExists = _ref6[1];
        textTemplateExists = _ref6[2];
      }

      if (!message.subject && subjectTemplateExists) {
        message.subject = yield _this4.render(`${template}/subject`, Object.assign({}, locals, {
          pretty: false
        }));
        message.subject = message.subject.trim();
      }

      if (message.subject && _this4.config.subjectPrefix) message.subject = _this4.config.subjectPrefix + message.subject;
      if (!message.html && htmlTemplateExists) message.html = yield _this4.render(`${template}/html`, locals);
      if (!message.text && textTemplateExists) message.text = yield _this4.render(`${template}/text`, Object.assign({}, locals, {
        pretty: false
      }));
      if (_this4.config.htmlToText && message.html && !message.text) // we'd use nodemailer-html-to-text plugin
        // but we really don't need to support cid
        // <https://github.com/andris9/nodemailer-html-to-text>
        message.text = htmlToText.fromString(message.html, _this4.config.htmlToText); // if we only want a text-based version of the email

      if (_this4.config.textOnly) delete message.html; // if no subject, html, or text content exists then we should
      // throw an error that says at least one must be found
      // otherwise the email would be blank (defeats purpose of email-templates)

      if (s.isBlank(message.subject) && s.isBlank(message.text) && s.isBlank(message.html) && _.isArray(message.attachments) && _.isEmpty(message.attachments)) throw new Error(`No content was passed for subject, html, text, nor attachments message props. Check that the files for the template "${template}" exist.`);
      return message;
    })();
  }

  send(options = {}) {
    var _this5 = this;

    return _asyncToGenerator(function* () {
      options = Object.assign({
        template: '',
        message: {},
        locals: {}
      }, options);
      let _options = options,
          template = _options.template,
          message = _options.message,
          locals = _options.locals;
      const attachments = message.attachments || _this5.config.message.attachments || [];
      message = _.defaultsDeep({}, _.omit(message, 'attachments'), _.omit(_this5.config.message, 'attachments'));
      locals = _.defaultsDeep({}, _this5.config.views.locals, locals);
      if (attachments) message.attachments = attachments;
      debug('template %s', template);
      debug('message %O', message);
      debug('locals (keys only): %O', Object.keys(locals)); // get all available templates

      const obj = yield _this5.renderAll(template, locals, message); // assign the object variables over to the message

      Object.assign(message, obj);

      if (_this5.config.preview) {
        debug('using `preview-email` to preview email');
        yield previewEmail(message);
      }

      if (!_this5.config.send) {
        debug('send disabled so we are ensuring JSONTransport'); // <https://github.com/nodemailer/nodemailer/issues/798>
        // if (this.config.transport.name !== 'JSONTransport')

        _this5.config.transport = nodemailer.createTransport({
          jsonTransport: true
        });
      }

      const res = yield _this5.config.transport.sendMail(message);
      debug('message sent');
      res.originalMessage = message;
      return res;
    })();
  }

}

module.exports = Email;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,